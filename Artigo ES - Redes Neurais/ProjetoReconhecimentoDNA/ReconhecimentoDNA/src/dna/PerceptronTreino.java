package dna;

import java.util.Random;

public class PerceptronTreino {

	private static double[] b = new double[100];
	private static double[] b2 = new double[100];
	private static double[] b3 = new double[100];
	private static double[] b4 = new double[100];
	private static double[] b5 = new double[100];
	private static double[] b6 = new double[100];
	private static double[] b7 = new double[100];
	private static double[] b8 = new double[100];
	private static double[] b9 = new double[100];
	private static double[] b10 = new double[100];

	static int A = 8;
	
	private static String Vetor = "";

	private static String VetorPesos = "";

	public static void main(String[] args) {
		Random random = new Random(System.currentTimeMillis());

		double[][] amostrasTreinamento = new double[100][A];

		double[] vetorAmostra1a = new double[] { 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.5,
				0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25 };
		double[] vetorAmostra1b = new double[] { 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.5, 0.25, 0.5,
				0.5, 0.5, 0.25, 0.5, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25,
				0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.25, 0.5, 0.25, 0.5,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5,
				0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5,
				0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5 };
		double[] vetorAmostra1c = new double[] { 0.25, 0.5, 0.5, 0.25, 0.25, 0.25, 
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
				0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 
				0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 
				0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 
				0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 
				0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 
				0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
				0.25, 0.25, 0.5, 0.25, 0.25, 0.5 };
		double[] vetorAmostra1d = new double[] { 0.5, 1.0, 0.5, 1.0, 1.0, 1.0, 
				0.5, 0.5, 0.5, 1.0, 0.25, 1.0, 0.25, 1.0, 1.0, 1.0, 0.5, 0.25, 
				1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.25,
				0.5, 0.5, 0.25, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.25, 0.5,
				1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 0.25, 1.0, 1.0, 1.0,
				0.5, 0.5, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 
				1.0, 1.0, 0.5, 0.5, 0.25, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 
				1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 
				0.5, 0.5, 0.5, 0.5 };
		double[] vetorAmostra1e = new double[] { 0.25, 0.25, 0.25, 0.5, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25,
				0.5, 0.5, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 
				0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.5, 
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25, 0.25, 0.5, 
				0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
				0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.5, 
				0.25, 0.5, 0.25, 0.5, 0.25, 0.25, 0.25, 0.25, 0.5, 0.5 };
		double[] vetorAmostra2a = new double[] { 0.5, 1.0, 0.5, 1.0, 1.0, 1.0,
				0.5, 0.5, 0.5, 1.0, 0.25, 1.0, 0.25, 1.0, 1.0, 1.0, 0.5, 0.25,
				1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0,
				0.25, 0.5, 0.5, 0.25, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0,
				0.25, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 0.25,
				1.0, 1.0, 1.0, 0.5, 0.5, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
				1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 0.5, 0.25, 0.5, 1.0, 1.0,
				0.5, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0,
				1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.5 };
		double[] vetorAmostra2b = new double[] { 1.0, 0.25, 0.5, 1.0, 1.0, 1.0,
				0.5, 0.5, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.25, 0.5,
				1.0, 0.5, 0.25, 0.5, 1.0, 0.5, 0.5, 1.0, 0.5, 0.5, 1.0, 1.0,
				1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0,
				1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 0.25, 0.5,
				1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
				0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 1.0,
				1.0, 0.5, 0.5, 0.25, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0, 1.0,
				0.5, 0.5, 0.5, 1.0, 0.5, 0.5, 0.25, 1.0, 0.5, 1.0 };
		double[] vetorAmostra2c = new double[] { 1.0, 1.0, 1.0, 1.0, 0.25, 1.0,
				1.0, 0.25, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 1.0, 0.25, 1.0, 1.0,
				1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5,
				0.25, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.25, 1.0, 0.5,
				1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 1.0,
				0.5, 1.0, 0.5, 0.5, 1.0, 0.25, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0,
				1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.25, 0.5, 1.0,
				1.0, 0.5, 0.25, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 1.0, 0.25,
				0.5, 1.0, 0.5, 1.0, 0.25, 0.25, 1.0, 0.5, 1.0, 1.0 };
		double[] vetorAmostra2d = new double[] { 1.0, 0.5, 1.0, 1.0, 0.5, 1.0,
				1.0, 0.5, 0.5, 0.5, 1.0, 1.0, 0.25, 0.5, 1.0, 1.0, 0.25, 1.0, 
				0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.25, 1.0, 0.5, 0.5, 0.5,
				0.25, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.25, 1.0, 1.0,
				0.25, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 
				1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 0.25, 0.5, 
				1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.25, 0.5, 0.5, 1.0, 0.5, 1.0, 
				1.0, 1.0, 0.25, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 
				0.5, 1.0, 1.0, 0.25, 1.0, 0.5, 0.5, 1.0, 1.0 };
		double[] vetorAmostra2e = new double[] { 0.25, 1.0, 1.0, 1.0, 1.0, 1.0,
				0.5, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0, 1.0,
				0.5, 1.0, 1.0, 1.0, 1.0, 0.25, 1.0, 0.25, 1.0, 1.0, 0.25, 1.0, 
				1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0,
				0.5, 1.0, 0.5, 0.25, 1.0, 0.25, 1.0, 1.0, 0.5, 1.0, 1.0, 0.5, 
				0.5, 1.0, 1.0, 0.5, 0.25, 1.0, 1.0, 1.0, 0.5, 1.0, 1.0, 1.0, 1.0,
				1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 0.5, 1.0, 1.0, 1.0, 0.5, 1.0, 0.25,
				1.0, 1.0, 1.0, 0.5, 0.5, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 
				0.5, 0.5, 0.5, 0.25, 1.0 };

								//funcaoModelarAmostras();
		
		
		int l = 0;
		int c = 0;
		for (; c < A; c++) {
			for (; l < 100; l++) {
				amostrasTreinamento[l][c] = vetorAmostra1a[l];
				amostrasTreinamento[l][c + 1] = vetorAmostra1b[l];
				amostrasTreinamento[l][c + 2] = vetorAmostra1c[l];
				amostrasTreinamento[l][c + 3] = vetorAmostra1d[l];
				amostrasTreinamento[l][c + 4] = vetorAmostra2a[l];
				amostrasTreinamento[l][c + 5] = vetorAmostra2b[l];
				amostrasTreinamento[l][c + 6] = vetorAmostra2c[l];
				amostrasTreinamento[l][c + 7] = vetorAmostra2d[l];
				//amostrasTreinamento[l][c + 7] = b9[l];
				//amostrasTreinamento[l][c + 7] = b10[l];
			}
		}

		for (int i = 0; i < amostrasTreinamento.length; i++) {
			for (int k = 0; k < A; k++) {
				System.out.println("[" + i + "]" + "[" + k + "]" + amostrasTreinamento[i][k]);
			}
			
		}

		double[] saidasdesejadas = new double[] { 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0};
		double[] w = new double[100];

		// Definição de um valor inicial aleatório para os pesos (w)
		for (int i = 0; i < w.length; i++) {
			w[i] = 1.0 / (random.nextInt(100) + 1.0);
			// System.out.println("Peso inicial (w) = " + i + w[i]);
		}
		
		
		double linhaAprendizado = 0.05;
		int epocas = 0;
		String erro;

		do {
			erro = "inexiste";
			for (int k = 0; k < A; k++) {
				double wsoma = 0.0;
				for (int i = 0; i < 100; i++) {
					wsoma += w[i] * amostrasTreinamento[i][k];
				}
				int x = funcaotransicao(wsoma);

				// Teste para saber se o resultado do treino condiz com o
				// resultado desejado
				if (x != saidasdesejadas[k]) {

					double novoaprendizado = linhaAprendizado
							* (saidasdesejadas[k] - x);
					for (int i = 0; i < w.length; i++) {
						w[i] = w[i] + novoaprendizado
								* amostrasTreinamento[i][k];
						// System.out.println("Peso final %s = %s" + i +
						// pesos[i]);
					}

					erro = "existe";

				}
			}
			epocas++;
		} while (erro.equals("existe") && epocas < 1000);

		for (int i = 0; i < w.length; i++) {
			System.out.println("Peso treinado = " + i + w[i]);
			VetorPesos += w[i] + (((i + 1) != w.length) ? ", " : "");
		}
		System.out.println(VetorPesos);
		System.out.println("Epocas - " + epocas);
	}

	private static int funcaotransicao(double wsoma) {
		return (wsoma >= 0.0) ? 1 : -1;
	}

	private static void funcaoModelarAmostras() {

		String[] padrao1a = { "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "t", "a", "a", "a", "a", "a",
				"a", "a", "a", "t", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "t", "a",
				"t", "a", "t", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"t", "a", "a", "a", "a", "a", "a", "a", "a", "a", "t", "t",
				"a", "a", "a", "a", "a", "a" };

		String[] padrao1b = { "a", "a", "a", "a", "a", "a", "a", "a", "a", "t",
				"a", "a", "a", "t", "a", "t", "t", "t", "a", "t", "a", "a",
				"a", "t", "a", "a", "a", "t", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "t", "t", "t", "t", "a", "t",
				"a", "t", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "t", "a", "a", "a", "a", "a", "t", "a",
				"t", "a", "a", "a", "a", "a", "a", "a", "a", "t", "a", "t",
				"a", "a", "a", "a", "a", "a", "a", "t", "a", "a", "a", "a",
				"a", "a", "a", "a", "t", "t" };

		String[] padrao1c = { "a", "t", "t", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "t", "a", "a",
				"a", "a", "a", "a", "t", "a", "a", "a", "a", "a", "t", "t",
				"a", "a", "a", "a", "a", "t", "a", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"t", "a", "a", "t", "t", "a", "a", "a", "a", "a", "a", "t",
				"a", "a", "a", "a", "a", "t", "a", "a", "t", "a", "a", "a",
				"a", "t", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "t", "a", "a", "t" };

		String[] padrao1d = { "a", "a", "a", "a", "t", "a", "a", "a", "t", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "t", "t",
				"a", "a", "a", "a", "t", "a", "t", "a", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "t", "a", "a", "a", "a", "a", "a",
				"a", "t", "a", "a", "a", "t", "t", "a", "a", "a", "a", "a",
				"a", "t", "a", "a", "a", "a", "t", "a", "a", "a", "a", "a",
				"a", "t", "a", "a", "t", "a", "a", "a", "a", "a", "a", "a",
				"a", "a", "t", "a", "t", "a", "a", "a", "t", "a", "a", "a",
				"a", "a", "a", "a", "a", "a" };

		String[] padrao1e = { "a", "a", "a", "t", "a", "a", "a", "a", "a", "t",
				"a", "a", "a", "a", "t", "a", "a", "a", "t", "t", "a", "a",
				"t", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
				"t", "a", "t", "a", "a", "a", "a", "t", "a", "a", "a", "a",
				"a", "a", "a", "a", "t", "a", "a", "a", "a", "a", "a", "a",
				"a", "t", "t", "a", "a", "a", "a", "t", "a", "a", "a", "a",
				"a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "t", "a",
				"a", "a", "a", "a", "a", "a", "a", "t", "a", "t", "a", "t",
				"a", "a", "a", "a", "t", "t" };

		String[] padrao2a = { "t", "g", "t", "g", "g", "g", "t", "t", "t", "g",
				"a", "g", "a", "g", "g", "g", "t", "a", "g", "g", "g", "t",
				"g", "g", "g", "t", "g", "g", "g", "g", "a", "t", "t", "a",
				"t", "t", "t", "g", "g", "g", "g", "g", "a", "t", "g", "g",
				"g", "t", "g", "g", "g", "t", "g", "a", "g", "g", "g", "t",
				"t", "a", "g", "g", "g", "g", "g", "g", "g", "g", "t", "g",
				"g", "g", "t", "t", "a", "t", "g", "g", "t", "g", "t", "t",
				"t", "g", "g", "t", "g", "g", "t", "g", "g", "g", "g", "t",
				"g", "g", "t", "t", "t", "t" };

		String[] padrao2b = { "g", "a", "t", "g", "g", "g", "t", "t", "t", "t",
				"g", "g", "t", "g", "g", "t", "a", "t", "g", "t", "a", "t",
				"g", "t", "t", "g", "t", "t", "g", "g", "g", "t", "g", "g",
				"t", "g", "g", "g", "t", "g", "g", "g", "g", "t", "t", "g",
				"g", "g", "g", "t", "t", "g", "a", "t", "g", "g", "g", "g",
				"g", "g", "g", "g", "g", "g", "g", "g", "t", "g", "g", "t",
				"g", "g", "t", "g", "g", "t", "t", "g", "g", "t", "t", "a",
				"g", "g", "t", "t", "t", "g", "g", "g", "t", "t", "t", "g",
				"t", "t", "a", "g", "t", "g" };

		String[] padrao2c = { "g", "g", "g", "g", "a", "g", "g", "a", "g", "t",
				"t", "t", "g", "t", "g", "a", "g", "g", "g", "g", "g", "g",
				"t", "t", "g", "g", "g", "g", "g", "t", "a", "g", "t", "t",
				"g", "g", "g", "g", "g", "a", "g", "t", "g", "g", "g", "g",
				"t", "g", "g", "g", "t", "g", "t", "g", "t", "g", "t", "t",
				"g", "a", "t", "g", "g", "g", "g", "g", "g", "g", "t", "g",
				"g", "t", "g", "g", "g", "a", "t", "g", "g", "t", "a", "g",
				"g", "t", "t", "g", "g", "t", "g", "a", "t", "g", "t", "g",
				"a", "a", "g", "t", "g", "g" };

		String[] padrao2d = { "g", "t", "g", "g", "t", "g", "g", "t", "t", "t",
				"g", "g", "a", "t", "g", "g", "a", "g", "t", "g", "g", "g",
				"t", "g", "g", "g", "a", "g", "t", "t", "t", "a", "t", "g",
				"g", "t", "g", "g", "g", "g", "a", "g", "g", "a", "g", "t",
				"g", "g", "g", "g", "t", "g", "g", "t", "g", "g", "g", "g",
				"t", "g", "g", "g", "g", "g", "t", "a", "t", "g", "g", "g",
				"g", "g", "g", "a", "t", "t", "g", "t", "g", "g", "g", "a",
				"g", "g", "t", "g", "g", "g", "t", "g", "g", "t", "g", "g",
				"a", "g", "t", "t", "g", "g" };

		String[] padrao2e = { "a", "g", "g", "g", "g", "g", "t", "a", "g", "g",
				"g", "g", "g", "t", "g", "g", "g", "g", "g", "t", "g", "g",
				"g", "g", "a", "g", "a", "g", "g", "a", "g", "g", "g", "g",
				"g", "g", "g", "t", "g", "g", "t", "g", "g", "g", "t", "g",
				"t", "a", "g", "a", "g", "g", "t", "g", "g", "t", "t", "g",
				"g", "t", "a", "g", "g", "g", "t", "g", "g", "g", "g", "g",
				"g", "t", "t", "t", "g", "t", "g", "g", "g", "t", "g", "a",
				"g", "g", "g", "t", "t", "a", "g", "g", "g", "g", "g", "g",
				"g", "t", "t", "t", "a", "g" };
		
		// ******************************************************************************************//
		b = function(padrao1a);
		// ******************************************************************************************//
		b2 = function(padrao1b);
		// ******************************************************************************************//
		b3 = function(padrao1c);
		// ******************************************************************************************//
		b4 = function(padrao1d);
		// ******************************************************************************************//
		b5 = function(padrao1e);
		// ******************************************************************************************//
		b6 = function(padrao2a);
		// ******************************************************************************************//
		b7 = function(padrao2b);
		// ******************************************************************************************//
		b8 = function(padrao2c);
		// ******************************************************************************************//
		b9 = function(padrao2d);
		// ******************************************************************************************//
		b10 = function(padrao2e);
		// ******************************************************************************************//
	}

	public static double[] function(String[] a) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] == "a") {
				b[i] = 0.25;
			} else if (a[i] == "t") {
				b[i] = 0.50;
			} else if (a[i] == "c") {
				b[i] = 0.75;
			} else if (a[i] == "g") {
				b[i] = 1.00;
			}
		}
		return b;
	}

}
